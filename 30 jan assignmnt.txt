{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ae437411-6937-4ffa-a400-04c3fb6cd68d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bac40a7f-deea-4438-91a5-ae12f178a0e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter number 50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grade-D\n"
     ]
    }
   ],
   "source": [
    "marks=int(input('enter number'))\n",
    "if marks >=90:\n",
    "    print('Grade -A')\n",
    "if marks >80 and marks <=90:\n",
    "    \n",
    "    print ('Grade - B')\n",
    "if marks >=60 and marks <=80:\n",
    "    print('Grade - C')\n",
    "if marks <60:\n",
    "          print('Grade-D')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5dc79a7d-5842-4d96-a3fe-23eab3dd2a17",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5af11fb8-35b1-4e09-9d64-27120ed52766",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "type number 75000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7500.0\n"
     ]
    }
   ],
   "source": [
    "n=int(input('type number'))\n",
    "if n>100000:\n",
    "    \n",
    "    print(15/100*n)\n",
    "if n >50000 and n<=100000:\n",
    "    print(10/100*n)\n",
    "if n<=50000:\n",
    "    print(5/100*n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9b9615ca-3eb0-4f02-9d4e-45b0b4a2ec1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "39615424-7c42-4590-8756-6ae071f50891",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter city name delhi\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "red fort\n"
     ]
    }
   ],
   "source": [
    "n=(input('enter city name'))\n",
    "if n =='delhi':\n",
    "    print('red fort')\n",
    "elif n=='agra':\n",
    "    print('taj mahal')\n",
    "elif n=='jaipur':\n",
    "    print('jaimahal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "feed033c-6b2f-4bfd-9278-85679a414789",
   "metadata": {},
   "outputs": [],
   "source": [
    "#6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eaba6491-91df-47f8-a9fe-c739d89d28b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "i = 1\n",
    "while i <= 4 :\n",
    "    j = 0\n",
    "    while  j <= 3 :\n",
    "        k = 0\n",
    "        while  k <= 5 :\n",
    "            print(i*j*k, end=\" \")\n",
    "            k += 1\n",
    "        print()\n",
    "        j += 1\n",
    "    print()\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14e0f3f0-4eca-4676-bfcd-aa6c242165f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48fbdb4b-fd0c-4367-8cc5-08896b2d5e0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#While Loop is used to execute a block of statements repeatedly until a given condition is satisfied.\n",
    "#And when the condition becomes false, the line immediately after the loop in the program is executed.\n",
    "#While loop falls under the category of indefinite iteration.\n",
    "#Statements represent all the statements indented by the same number of character spaces after a programming construct\n",
    "are considered to be part of a single block of code.\n",
    "#Python uses indentation as its method of grouping statements. When a while loop is executed, expr is first evaluated in a Boolean context and if it is true, the loop body is executed. Then the expr is checked again,\n",
    "#if it is still true then the body is executed again and this continues until the expression becomes false.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3ddfa16-2f8d-4498-a39e-9ccd07739cfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "count=0\n",
    "\n",
    "while count<=2:\n",
    "\n",
    "\n",
    "    count+=1\n",
    "\n",
    "    print('hello')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0faa31e-ecbd-4f94-8a2c-30bbc43d806b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59788bb1-1a49-4bf7-a665-ec621e1c7268",
   "metadata": {},
   "outputs": [],
   "source": [
    "count = 0\n",
    "number = 180\n",
    "while number > 10:\n",
    "    \n",
    "    number = number / 3\n",
    "    \n",
    "    count = count + 1\n",
    "print('Total iteration ', count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c56bd4c-f298-4dc9-ae18-895ac2cd1471",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q 7/8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c7c7e9c-f509-4706-b062-6905eccea48d",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"====The First 10 Natural Numbers in Reverse===\")\n",
    "i = 10\n",
    "\n",
    "while(i >= 1):\n",
    "    print(i)\n",
    "    i = i - 1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

